defmodule VelocyPack.EncoderTest do
  use ExUnit.Case
  doctest VelocyPack

  import VelocyPack

  describe "encode" do
    test "illegal" do
      assert encode!(:illegal) == <<0x17>>
    end

    test "nil" do
      assert encode!(nil) == <<0x18>>
    end

    test "boolean" do
      assert encode!(false) == <<0x19>>
      assert encode!(true) == <<0x1a>>
    end

    test "double" do
      assert encode!(133.7) == <<0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0xb6, 0x60, 0x40>>;
      assert encode!(-133.7) == <<0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0xb6, 0x60, 0xc0>>;
    end

    test "min/max key" do
      assert encode!(:min_key) == <<0x1e>>
      assert encode!(:max_key) == <<0x1f>>
    end

    test "small int" do
      assert encode!(0) == <<0x30>>
      assert encode!(1) == <<0x31>>
      assert encode!(2) == <<0x32>>
      assert encode!(3) == <<0x33>>
      assert encode!(4) == <<0x34>>
      assert encode!(5) == <<0x35>>
      assert encode!(6) == <<0x36>>
      assert encode!(7) == <<0x37>>
      assert encode!(8) == <<0x38>>
      assert encode!(9) == <<0x39>>
      assert encode!(-6) == <<0x3a>>
      assert encode!(-5) == <<0x3b>>
      assert encode!(-4) == <<0x3c>>
      assert encode!(-3) == <<0x3d>>
      assert encode!(-2) == <<0x3e>>
      assert encode!(-1) == <<0x3f>>
    end

    test "int" do
      assert encode!(-7) == <<0x20, (-7)::little-signed>>
      assert encode!(-128) == <<0x20, 0x80>>
      assert encode!(-32768) == <<0x21, 0x00, 0x80>>
      assert encode!(-8388608) == <<0x22, 0x00, 0x00, 0x80>>
      assert encode!(-2147483648) == <<0x23, 0x00, 0x00, 0x00, 0x80>>
      assert encode!(-549755813888) == <<0x24, 0x00, 0x00, 0x00, 0x00, 0x80>>
      assert encode!(-140737488355328) == <<0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80>>
      assert encode!(-36028797018963968) == <<0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80>>
      assert encode!(-9223372036854775808) == <<0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80>>

      assert encode!(255) == <<0x28, 0xff>>
      assert encode!(65535) == <<0x29, 0xff, 0xff>>
      assert encode!(16777215) == <<0x2a, 0xff, 0xff, 0xff>>
      assert encode!(4294967295) == <<0x2b, 0xff, 0xff, 0xff, 0xff>>
      assert encode!(1099511627775) == <<0x2c, 0xff, 0xff, 0xff, 0xff, 0xff>>
      assert encode!(281474976710655) == <<0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>
      assert encode!(72057594037927935) == <<0x2e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>
      assert encode!(18446744073709551615) == <<0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>
    end

    test "short string" do
      assert encode!("Hallo Welt!") == <<0x4b, 72, 97, 108, 108, 111, 32, 87, 101, 108, 116, 33>>
      assert encode!("Hello World!") == <<0x4c, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33>>
    end

    test "string" do
      data = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. "
        <> "Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. "
        <> "Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. "
        <> "Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, "
        <> "venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. "
        <> "Vivamus elementum semper nisi. Aenean vulputate eleifend tellus."
      expected = <<
        0xbf, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65, 0x6d,
        0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74,
        0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74,
        0x75, 0x65, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65,
        0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
        0x6f, 0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20,
        0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x6d, 0x61,
        0x73, 0x73, 0x61, 0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x69, 0x73, 0x20,
        0x6e, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x62, 0x75,
        0x73, 0x20, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x20,
        0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
        0x73, 0x2c, 0x20, 0x6e, 0x61, 0x73, 0x63, 0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64, 0x69,
        0x63, 0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63,
        0x20, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x75, 0x6c, 0x74,
        0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x70, 0x65, 0x6c, 0x6c,
        0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75, 0x2c, 0x20, 0x70, 0x72, 0x65,
        0x74, 0x69, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x69, 0x73, 0x2c, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20,
        0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20,
        0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
        0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x73, 0x74,
        0x6f, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x76, 0x65, 0x6c,
        0x2c, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x76,
        0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x61,
        0x72, 0x63, 0x75, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x6a, 0x75, 0x73,
        0x74, 0x6f, 0x2c, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x75, 0x74, 0x2c, 0x20,
        0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x61, 0x2c, 0x20, 0x76, 0x65, 0x6e,
        0x65, 0x6e, 0x61, 0x74, 0x69, 0x73, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x2c, 0x20, 0x6a, 0x75,
        0x73, 0x74, 0x6f, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x63, 0x74,
        0x75, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x75, 0x20, 0x70, 0x65, 0x64, 0x65,
        0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e,
        0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75,
        0x6e, 0x74, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73,
        0x2e, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6d, 0x75, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
        0x74, 0x75, 0x6d, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x2e,
        0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74,
        0x65, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75,
        0x73, 0x2e>>
      assert encode!(data) == expected
    end

    test "empty list" do
      assert encode!([]) == <<0x01>>
    end

    test "lists with same sized elements as arrays without index table" do
      assert encode!([1, 2, 3]) == <<0x02, 0x5, "1", "2", "3">>
      v = for i <- -6..9, do: i
      <<0x02, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v

      v = for i <- 256..512, do: i
      <<0x03, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v

      v = for i <- 65537..131072, do: i
      <<0x04, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v
    end

    test "lists with different sized elements as arrays with index table" do
      assert encode!([256, 1, 2]) == <<0x06, 0x0b, 0x3, 0x29, 256::little-unsigned-size(16), "1", "2", 0x03, 0x06, 0x07>>

      v = for i <- 1..64, do: i
      <<0x06, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v

      v = for i <- 1..1024, do: i
      <<0x07, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v

      v = for i <- 1..65537, do: i
      <<0x08, _::binary>> = encoded = encode!(v)
      assert decode!(encoded) == v
    end

    test "compact array" do
      assert encode!([1, 16], compact_arrays: true) == <<0x13, 0x06, 0x31, 0x28, 0x10, 0x02>>

      # This test covers the corner case were, due to the number of bytes required for the size
      # information itself, an additional byte is needed to encode the final total size.
      s = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. "
        <> "Aenean massa. Cum sociis ..."
      v = [s, 1, 2, 42]
      <<0x13, _::binary>> = encoded = encode!(v, compact_arrays: true)
      assert decode!(encoded) == v
    end

    test "nested list" do
      expected = <<0x02, 0x0c, 0x02, 0x05, 0x31, 0x32, 0x33, 0x02, 0x05, 0x31, 0x32, 0x33>>
      data = [[1, 2, 3], [1, 2, 3]]
      assert encode!(data) == expected
    end

    test "empty object" do
      assert encode!(%{}) == <<0x0a>>
    end

    test "object with string and atom keys" do
      assert encode!(%{ "a" => "b" }) == <<0x0b, 0x07, 0x01, 0x41, 0x61, 0x41, 0x62>>
      assert encode!(%{ a: "b", b: "a" }) == <<0x0b, 0x0d, 0x02, 0x41, 0x61, 0x41, 0x62, 0x41, 0x62, 0x41, 0x61, 0x03, 0x07>>
    end

    test "object 1 byte offset" do
      data = %{"0" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
        "1" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
        "2" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
        "3" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
        "4" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"}}
      expected = <<0x0b, 0xe9, 0x05, 0x41, 0x30, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44,
        0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f,
        0x41, 0x31, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74,
        0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x32, 0x0b,
        0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74,
        0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x33, 0x0b, 0x2b, 0x05, 0x41,
        0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44,
        0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x34, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74,
        0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03,
        0x0a, 0x11, 0x18, 0x1f, 0x03, 0x30, 0x5d, 0x8a, 0xb7>>
      assert encode!(data) == expected
    end

    test "object 2 bytes offset" do
      data = %{"0" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "1" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "2" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "3" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "4" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "5" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "6" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "7" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "8" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"},
               "9" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                        "test","6" => "test","7" => "test","8" => "test","9" => "test"}}
      expected = <<0x0c, 0x6b, 0x03, 0x0a, 0x00, 0x41,
        0x30, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x31, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x32, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x33, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x34, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x35, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x36, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x37, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x38, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
        0x39, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
        0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
        0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
        0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
        0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x05,
        0x00, 0x5a, 0x00, 0xaf, 0x00, 0x04, 0x01, 0x59, 0x01, 0xae, 0x01, 0x03, 0x02, 0x58, 0x02, 0xad, 0x02,
        0x02, 0x03>>
      assert encode!(data) == expected
    end

    test "compact object" do
      data = %{"a" => 12, "b" => true, "c" => "xyz"}
      expected = <<0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79, 0x7a, 0x03>>
      assert encode!(data, compact_objects: true) == expected
    end
  end
end
