defmodule VelocyPackTest do
  use ExUnit.Case
  doctest VelocyPack

  import VelocyPack.Parser

  describe "parse" do
    test "empty array" do
      assert parse!(<<0x01>>) == []
    end

    test "empty object" do
      assert parse!(<<0x0a>>) == %{}
    end

    test "illegal" do
      assert parse!(<<0x17>>) == :illegal
    end

    test "nil" do
      assert parse!(<<0x18>>) == nil
    end

    test "boolean" do
      assert parse!(<<0x19>>) == false
      assert parse!(<<0x1a>>) == true
    end

    test "double" do
      assert parse!(<<0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0xb6, 0x60, 0x40>>) == 133.7;
      assert parse!(<<0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0xb6, 0x60, 0xc0>>) == -133.7;
    end

    test "date" do
      assert parse!(<<0x1c, 0, 83, 115, 5, -114, 0, 0, 0>>) == DateTime.from_unix(609976800000, :milliseconds)
    end    

    test "min/max key" do
      assert parse!(<<0x1e>>) == :min_key
      assert parse!(<<0x1f>>) == :max_key
    end

    test "small int" do
      assert parse!(<<0x30>>) ==  0
      assert parse!(<<0x31>>) ==  1
      assert parse!(<<0x32>>) ==  2
      assert parse!(<<0x33>>) ==  3
      assert parse!(<<0x34>>) ==  4
      assert parse!(<<0x35>>) ==  5
      assert parse!(<<0x36>>) ==  6
      assert parse!(<<0x37>>) ==  7
      assert parse!(<<0x38>>) ==  8
      assert parse!(<<0x39>>) ==  9
      assert parse!(<<0x3a>>) == -6
      assert parse!(<<0x3b>>) == -5
      assert parse!(<<0x3c>>) == -4
      assert parse!(<<0x3d>>) == -3
      assert parse!(<<0x3e>>) == -2
      assert parse!(<<0x3f>>) == -1
    end

    test "int" do
      assert parse!(<<0x20, 0xff>>) == -1
      assert parse!(<<0x20, 0x7f>>) == 127
      assert parse!(<<0x20, 0x80>>) == -128
      assert parse!(<<0x21, 0xff, 0xff>>) == -1
      assert parse!(<<0x22, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x23, 0xff, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x24, 0xff, 0xff, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x25, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x26, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == -1
      assert parse!(<<0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f>>) == 9223372036854775807
      assert parse!(<<0x28, 0xff>>) == 255
      assert parse!(<<0x29, 0xff, 0xff>>) == 65535
      assert parse!(<<0x2a, 0xff, 0xff, 0xff>>) == 16777215
      assert parse!(<<0x2b, 0xff, 0xff, 0xff, 0xff>>) == 4294967295
      assert parse!(<<0x2c, 0xff, 0xff, 0xff, 0xff, 0xff>>) == 1099511627775
      assert parse!(<<0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == 281474976710655
      assert parse!(<<0x2e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == 72057594037927935
      assert parse!(<<0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff>>) == 18446744073709551615
    end

    test "short string" do
      assert parse!(<<0x4b, 72, 97, 108, 108, 111, 32, 87, 101, 108, 116, 33>>) == "Hallo Welt!"
      assert parse!(<<0x4c, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33>>) == "Hello World!"
    end

    test "string" do
      expected = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. "
        <> "Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. "
        <> "Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. "
        <> "Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, "
        <> "venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. "
        <> "Vivamus elementum semper nisi. Aenean vulputate eleifend tellus."
      data = <<
        0xbf, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65, 0x6d,
        0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74,
        0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74,
        0x75, 0x65, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65,
        0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
        0x6f, 0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20,
        0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x6d, 0x61,
        0x73, 0x73, 0x61, 0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x69, 0x73, 0x20,
        0x6e, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x62, 0x75,
        0x73, 0x20, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x20,
        0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
        0x73, 0x2c, 0x20, 0x6e, 0x61, 0x73, 0x63, 0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64, 0x69,
        0x63, 0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63,
        0x20, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x75, 0x6c, 0x74,
        0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x70, 0x65, 0x6c, 0x6c,
        0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75, 0x2c, 0x20, 0x70, 0x72, 0x65,
        0x74, 0x69, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x69, 0x73, 0x2c, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20,
        0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20,
        0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
        0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x73, 0x74,
        0x6f, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x76, 0x65, 0x6c,
        0x2c, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x76,
        0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x61,
        0x72, 0x63, 0x75, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x6a, 0x75, 0x73,
        0x74, 0x6f, 0x2c, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x75, 0x74, 0x2c, 0x20,
        0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x61, 0x2c, 0x20, 0x76, 0x65, 0x6e,
        0x65, 0x6e, 0x61, 0x74, 0x69, 0x73, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x2c, 0x20, 0x6a, 0x75,
        0x73, 0x74, 0x6f, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x63, 0x74,
        0x75, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x75, 0x20, 0x70, 0x65, 0x64, 0x65,
        0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e,
        0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75,
        0x6e, 0x74, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73,
        0x2e, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6d, 0x75, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
        0x74, 0x75, 0x6d, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x2e,
        0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74,
        0x65, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75,
        0x73, 0x2e>>
      assert parse!(data) == expected
    end

    test "binary" do
      expected = <<49, 50, 51, 52, 53, 54, 55, 56, 57>>
      assert parse!(<<0xc0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc1, 9, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc2, 9, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc3, 9, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc4, 9, 0, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc5, 9, 0, 0, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc6, 9, 0, 0, 0, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
      assert parse!(<<0xc7, 9, 0, 0, 0, 0, 0, 0, 0, 49, 50, 51, 52, 53, 54, 55, 56, 57>>) == expected
    end

    test "array with index table" do
      expected = [ 1, 2, 3 ];
      assert parse!(<<0x06, 0x09, 0x03, 0x31, 0x32, 0x33, 0x03, 0x04, 0x05>>) == expected
      assert parse!(<<0x07, 0x0e, 0x00, 0x03, 0x00, 0x31, 0x32, 0x33, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00>>) == expected
      assert parse!(<<0x08, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x09,
                      0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00>>) == expected
      assert parse!(<<0x09, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x09, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>) == expected
    end

    test "array with index table with single element" do
      assert parse!(<<0x06, 0x04, 0x01, 0x31>>) == [1]
    end

    test "array without index table" do
      expected = [ 1, 2, 3 ];
      assert parse!(<<0x02, 0x05, 0x31, 0x32, 0x33>>) == expected
      assert parse!(<<0x03, 0x06, 0x00, 0x31, 0x32, 0x33>>) == expected
      assert parse!(<<0x04, 0x08, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33>>) == expected
      assert parse!(<<0x05, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33>>) == expected
    end

    test "compact array" do
      assert parse!(<<0x13, 0x06, 0x31, 0x28, 0x10, 0x02>>) == [1, 16]
    end

    test "nested arrays" do
      expected = [[1, 2, 3], [1, 2, 3]]
      assert parse!(<<0x02, 0x0c, 0x02, 0x05, 0x31, 0x32, 0x33, 0x02, 0x05, 0x31, 0x32, 0x33>>) == expected
    end

    test "array with nested compact array" do
      expected = [[1, 2, 3], [1, 2, 3 ]]
      assert parse!(<<0x02, 0x0e, 0x13, 0x06, 0x31, 0x32, 0x33, 0x03, 0x13, 0x06, 0x31, 0x32, 0x33, 0x03>>) == expected
    end

    test "object with single string entry" do
      expected = %{ "a" => "b" }
      assert parse!(<<0x0b, 0x07, 0x01, 0x41, 0x61, 0x41, 0x62>>) == expected
    end

    test "compact object" do
      expected = %{"a" => 12, "b" => true, "c" => "xyz"}
      assert parse!(<<0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79,
                      0x7a, 0x03>>) == expected
    end

    test "array of objects" do
      expected = [%{"a" => 12, "b" => true, "c" => "xyz"}, %{"a" => 12, "b" => true, "c" => "xyz"}]
      assert parse!(<<0x13, 0x23, 0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79,
                      0x7a, 0x03, 0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79,
                      0x7a, 0x03, 0x02>>) == expected
    end

    test "fixed size array of mix types" do
      expected = [
        %{ "key" => 42 },
        "fooooobar",
        "x",
        <<0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08>>
      ]
      data = <<
        0x02, 0x2a,
        0x0b, 0x0a, 0x01, 0x43, 0x6b, 0x65, 0x79, 0x21, 0x2a, 0x00, # object
        0x49, 0x66, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x62, 0x61, 0x72, # string "fooooobar" 
        0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, # string "x"
        0xc0, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08  # binary data
      >>
      assert parse!(data) == expected
    end

    test "object 1 byte offset" do
      expected = %{"0" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
                   "1" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
                   "2" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
                   "3" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"},
                   "4" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test"}}

      assert parse!(<<0x0b, 0xe9, 0x05, 0x41, 0x30, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44,
                      0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f,
                      0x41, 0x31, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74,
                      0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x32, 0x0b,
                      0x2b, 0x05, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74,
                      0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x33, 0x0b, 0x2b, 0x05, 0x41,
                      0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44,
                      0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x41, 0x34, 0x0b, 0x2b, 0x05, 0x41, 0x30, 0x44, 0x74,
                      0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03,
                      0x0a, 0x11, 0x18, 0x1f, 0x03, 0x30, 0x5d, 0x8a, 0xb7>>) == expected
    end

    test "object 2 bytes offset" do
      expected = %{"0" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "1" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "2" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "3" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "4" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "5" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "6" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "7" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "8" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"},
                   "9" => %{"0" => "test","1" => "test","2" => "test","3" => "test","4" => "test","5" =>
                   "test","6" => "test","7" => "test","8" => "test","9" => "test"}}

      assert parse!(<<0x0c, 0x6f, 0x03, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41,
                      0x30, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x31, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x32, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x33, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x34, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x35, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x36, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x37, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x38, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x41,
                      0x39, 0x0b, 0x53, 0x0a, 0x41, 0x30, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x31, 0x44, 0x74, 0x65, 0x73,
                      0x74, 0x41, 0x32, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x33, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x34,
                      0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x35, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x36, 0x44, 0x74, 0x65,
                      0x73, 0x74, 0x41, 0x37, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41, 0x38, 0x44, 0x74, 0x65, 0x73, 0x74, 0x41,
                      0x39, 0x44, 0x74, 0x65, 0x73, 0x74, 0x03, 0x0a, 0x11, 0x18, 0x1f, 0x26, 0x2d, 0x34, 0x3b, 0x42, 0x09,
                      0x00, 0x5e, 0x00, 0xb3, 0x00, 0x08, 0x01, 0x5d, 0x01, 0xb2, 0x01, 0x07, 0x02, 0x5c, 0x02, 0xb1, 0x02,
                      0x06, 0x03>>) == expected
    end
  end
end
